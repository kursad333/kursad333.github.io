{"version":3,"file":"app_5-384cb1e9.js","sources":["../../src/db/PaymentDB.ts","../../src/services/EventService.ts","../../src/scripts/event.ts"],"sourcesContent":["import { api } from \"@hboictcloud/api\";\nimport \"../../wwwroot/assets/legacy/hboictcloud-config\";\nimport {Payment} from \"../types\";\n\nexport async function dbGetPayments(eventId: number){\n    const query: string = \"SELECT * FROM payment WHERE payment.eventId = ?\"\n    try {\n        const data: string | Array<Payment> = await api.queryDatabase(\n            query,\n            eventId\n        )\n        return data\n    }\n    catch (reason: string) {\n        console.log(reason);\n        return reason\n    }\n}\n\nexport async function dbCreatePayment(payment: Payment) {\n    const query: string = \"INSERT INTO payment (name, description, amount, eventId, datePaid) VALUES (?,?,?,?,?)\"\n    try {\n        const data = await api.queryDatabase(\n            query,\n            payment.name, payment.description, payment.amount, payment.eventId, payment.datePaid\n        )\n        return data\n    }\n    catch (reason: string) {\n        console.log(reason)\n        return reason\n    }\n}\n\nexport async function dbDeletePayment(payment: Payment) {\n    const query: string = \"DELETE FROM payment WHERE paymentId = ?\"\n    try {\n        const data = api.queryDatabase(\n            query,\n            payment.paymentId\n        )\n        return data\n    }\n    catch (reason: string) {\n        console.log(reason);\n        return reason\n    }\n}\n\nexport async function dbEditPayment(payment: Payment, newAmount: number) {\n    const query: string = 'UPDATE payment SET amount = ? WHERE paymentId = ?'\n    try {\n        const data = api.queryDatabase(\n            query,\n            newAmount, payment.paymentId\n        )\n        return data\n    }\n    catch (reason: string) {\n        console.log(reason);\n        return reason\n    }\n}","import {Participant, Payment} from \"../types.ts\";\nimport {dbDeletePayment, dbEditPayment, dbGetPayments} from \"../db/PaymentDB.ts\";\nimport {dbGetParticipants} from \"../db/ParticipantDB.ts\";\nimport {capFirstChar, validateNumber} from \"../scripts/util.ts\";\n\n\n// Set up new event to trigger UI refresh\nconst updateFinancials: Event = new Event('updateFinancials');\n\nfunction payCalculation(): void {\n    window.open('./payment.html', '_blank')\n    console.log('click pay')\n}\n\nfunction shareCalculation(): void {\n    window.open(`https://wa.me/?text=`, '_blank')\n    console.log('click share')\n}\n\n// Edit payment function\nasync function editPayment(payment: Payment): Promise<void> {\n    const userEdit: string = prompt(`Wijzig het bedrag van ${capFirstChar(payment.description)}`)!;\n    if (validateNumber([userEdit])) {\n        await dbEditPayment(payment, parseInt(userEdit));\n        document.dispatchEvent(updateFinancials)\n    }\n}\n\n// Delete payment function\nasync function deletePayment(payment: Payment): Promise<void> {\n    const userConfirm = confirm(`Weet u zeker dat u de betaling voor ${capFirstChar(payment.description)} wilt verwijderen?`);\n    if (userConfirm) {\n        await dbDeletePayment(payment);\n        document.dispatchEvent(updateFinancials)\n    }\n}\n\n// Create action buttons for either a payment or a calculation card. Used for calculation and payment cards\nexport function createActionButtons(mode: 'PAYMENT' | 'CALCULATION', payment?: Payment): HTMLTableRowElement | HTMLSpanElement {\n    switch (mode) {\n        case \"PAYMENT\":\n            const createPaymentBtn = (text: string, clickHandler: (payment: Payment) => void) => {\n                const button: HTMLButtonElement = document.createElement('button');\n                button.addEventListener('click', () => clickHandler(payment!));\n                button.innerHTML = text;\n                return button;\n            };\n\n            const editBtn: HTMLButtonElement = createPaymentBtn(\n                `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"26\" viewBox=\"0 -960 960 960\" width=\"26\">  \n                        <path d=\"M200-200h57l391-391-57-57-391 391v57Zm-80 80v-170l528-527q12-11 26.5-17t30.5-6q16 0 31 6t26 18l55 56q12 11 17.5 26t5.5 30q0 16-5.5 30.5T817-647L290-120H120Zm640-584-56-56 56 56Zm-141 85-28-29 57 57-29-28Z\"/>                      </svg>`,\n                editPayment\n            );\n\n            const deleteBtn: HTMLButtonElement = createPaymentBtn(\n                `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"26\" viewBox=\"0 -960 960 960\" width=\"26\">  \n                    <path d=\"M280-120q-33 0-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM360-280h80v-360h-80v360Zm160 0h80v-360h-80v360ZM280-720v520-520Z\"/>                  </svg>`,\n                deletePayment\n            );\n\n            const paymentRow: HTMLTableCellElement = document.createElement('td');\n            paymentRow.className = 'table-input-group';\n            paymentRow.appendChild(editBtn);\n            paymentRow.appendChild(deleteBtn);\n            return paymentRow;\n\n        case \"CALCULATION\":\n            const createCalcBtn = (text: string, clickHandler: () => void) => {\n                const button: HTMLButtonElement = document.createElement('button');\n                button.addEventListener('click', () => clickHandler());\n                button.innerHTML = text;\n                return button;\n            };\n            const payBtn: HTMLButtonElement = createCalcBtn(\n                `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 -960 960 960\" width=\"24\">  \n                    <path d=\"m480-560-56-56 63-64H320v-80h167l-64-64 57-56 160 160-160 160ZM280-80q-33 0-56.5-23.5T200-160q0-33 23.5-56.5T280-240q33 0 56.5 23.5T360-160q0 33-23.5 56.5T280-80Zm400 0q-33 0-56.5-23.5T600-160q0-33 23.5-56.5T680-240q33 0 56.5 23.5T760-160q0 33-23.5 56.5T680-80ZM40-800v-80h131l170 360h280l156-280h91L692-482q-11 20-29.5 31T622-440H324l-44 80h480v80H280q-45 0-68.5-39t-1.5-79l54-98-144-304H40Z\"/>                  </svg>`,\n                payCalculation\n            )\n            const shareBtn: HTMLButtonElement = createCalcBtn(\n                `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 30 30\" width=\"24\" height=\"24\">  \n                    <path d=\"M 15 3 C 8.373 3 3 8.373 3 15 C 3 17.251208 3.6323415 19.350068 4.7109375 21.150391 L 3.1074219 27 L 9.0820312 25.431641 C 10.829354 26.425062 12.84649 27 15 27 C 21.627 27 27 21.627 27 15 C 27 8.373 21.627 3 15 3 z M 10.892578 9.4023438 C 11.087578 9.4023438 11.287937 9.4011562 11.460938 9.4101562 C 11.674938 9.4151563 11.907859 9.4308281 12.130859 9.9238281 C 12.395859 10.509828 12.972875 11.979906 13.046875 12.128906 C 13.120875 12.277906 13.173313 12.453437 13.070312 12.648438 C 12.972312 12.848437 12.921344 12.969484 12.777344 13.146484 C 12.628344 13.318484 12.465078 13.532109 12.330078 13.662109 C 12.181078 13.811109 12.027219 13.974484 12.199219 14.271484 C 12.371219 14.568484 12.968563 15.542125 13.851562 16.328125 C 14.986562 17.342125 15.944188 17.653734 16.242188 17.802734 C 16.540187 17.951734 16.712766 17.928516 16.884766 17.728516 C 17.061766 17.533516 17.628125 16.864406 17.828125 16.566406 C 18.023125 16.268406 18.222188 16.319969 18.492188 16.417969 C 18.766188 16.515969 20.227391 17.235766 20.525391 17.384766 C 20.823391 17.533766 21.01875 17.607516 21.09375 17.728516 C 21.17075 17.853516 21.170828 18.448578 20.923828 19.142578 C 20.676828 19.835578 19.463922 20.505734 18.919922 20.552734 C 18.370922 20.603734 17.858562 20.7995 15.351562 19.8125 C 12.327563 18.6215 10.420484 15.524219 10.271484 15.324219 C 10.122484 15.129219 9.0605469 13.713906 9.0605469 12.253906 C 9.0605469 10.788906 9.8286563 10.071437 10.097656 9.7734375 C 10.371656 9.4754375 10.692578 9.4023438 10.892578 9.4023438 z\"/>                  </svg>`,\n                shareCalculation\n            )\n            const calculationRow: HTMLSpanElement = document.createElement('span')\n            calculationRow.className = 'calculation-card-buttons'\n            calculationRow.appendChild(payBtn)\n            calculationRow.appendChild(shareBtn)\n            return calculationRow\n    }\n}\n\n/* This function is responsible for the calculations of the event. It takes an eventId and returns an array of strings\n   that can be used to render the calculations in the UI from event.ts.\n */\nexport async function calculateCosts(eventId: number): Promise<Array<string>> {\n    const allPayments: Array<Payment> = await dbGetPayments(eventId);\n    const allParticipants: Array<Participant> = await dbGetParticipants(eventId);\n\n    const calcMsg: Array<string> = [];\n    const createMsg = (payer: string, amount: number, participant: string, description: string) => {\n        return (`${capFirstChar(payer)} krijgt ${amount.toFixed(2)} van ${capFirstChar(participant)} voor ${capFirstChar(description)}`);\n    }\n    // Go through each payment\n    allPayments.forEach(payment => {\n        // Total amount / all participants\n        const moneyOwed: number = (payment.amount / allParticipants.length);\n        allParticipants.forEach(participant => {\n            // Filter out payer's share in the total payment\n            if (participant.name !== payment.name) {\n                // PAYER receives X from PARTICIPANT for DESCRIPTION\n                const msg: string = createMsg(payment.name, moneyOwed, participant.name, payment.description);\n                calcMsg.push(msg);\n            }\n        });\n    });\n    return calcMsg\n}","import {url} from \"@hboictcloud/api\"\nimport {DokkieEvent, Participant, Payment} from \"../types\"\nimport {authorizeUser, destroySession} from \"../services/AuthService\"\nimport {dbCreatePayment, dbGetPayments} from \"../db/PaymentDB\"\nimport {capFirstChar, currDateString, dateToString, showError, validateNumber, validateText} from \"./util\"\nimport {calculateCosts, createActionButtons} from \"../services/EventService.ts\"\nimport {dbGetEventDetails} from \"../db/EventDB.ts\";\nimport {dbGetParticipants} from \"../db/ParticipantDB.ts\";\n\n// Authorize the user\nauthorizeUser()\n\n// Initialize required variables\nconst eventId: number = url.getFromQueryString(\"id\")\nconst descField: HTMLInputElement = document.querySelector('#description')!\nconst amountField: HTMLInputElement = document.querySelector('#amount')!\nconst logoutBtn: HTMLElement = document.querySelector('#logoutDebug')!\nconst confirmPayment: HTMLButtonElement = document.querySelector('#createBtn')!\nconst payerSelect: HTMLElement = document.querySelector('#payerSelect')!\n\n// State variables\nlet selectedPayer: undefined | string = undefined\n\n// Event listeners\nlogoutBtn.addEventListener('click', destroySession)\npayerSelect.addEventListener('click', (e: MouseEvent) => payerSelection('SELECT', undefined, e))\nconfirmPayment.addEventListener('click', createPayment)\n\n// Listen for updateFinancials event coming from EventService.ts\ndocument.addEventListener('updateFinancials', async () => {\n    await updateFinancials()\n})\n\n// Function wrapper to update all financials at once\nexport async function updateFinancials(): Promise<void> {\n    await renderCalculations()\n    await renderPayments()\n}\n\n// Function responsible for creating and updating the payment table including total cost and user actions like editing and deleting\nasync function renderPayments() {\n    const dataPayment: Array<Payment> = await dbGetPayments(eventId)\n    const paymentTable: HTMLTableElement = document.querySelector('#tableBody')!\n    const totalElement: HTMLTableCellElement = document.querySelector('#totalCost')!\n    let totalPayments: number = 0\n\n    // Clear the existing table content\n    paymentTable.innerHTML = ''\n\n    // Populate the table with payment data\n    dataPayment.forEach(payment => {\n        const newRow: HTMLTableRowElement = document.createElement('tr')\n        newRow.setAttribute('data-record', payment.paymentId!.toString())\n        newRow.innerHTML = `  \n          <td data-cell=\"beschrijving\">${payment.description}</td>  \n          <td data-cell=\"bedrag\">€ ${payment.amount}</td>  \n          <td data-cell=\"betaald door\">${payment.name}</td>`\n        newRow.appendChild(createActionButtons('PAYMENT', payment))\n        paymentTable.appendChild(newRow)\n        totalPayments += payment.amount\n    })\n    // Update the total cost\n    totalElement.textContent = `€${totalPayments.toFixed(2)}`\n\n    // We always want at least 6 rows to keep the UI in place\n    const rowsLeft: number = 6 - dataPayment.length\n    // Fill in empty rows if needed\n    for (let index: number = 0; index < rowsLeft; index++) {\n        const newRow: HTMLTableRowElement = document.createElement('tr')\n        newRow.innerHTML =\n            `<td>&zwnj;</td\n            <td>&zwnj;</td> \n            <td>&zwnj;</td>          \n            <td>&zwnj;</td>`\n        paymentTable.appendChild(newRow)\n    }\n}\n\n// Function used to render all calculations. Takes an array with strings created in calculateCosts() in eventService.ts\nasync function renderCalculations(): Promise<void> {\n    const calculatedCosts: Array<string> = await calculateCosts(eventId)\n    const calculationDeck: HTMLElement = document.querySelector('#calculationDeck')!\n    calculationDeck.innerHTML = ''\n\n    calculatedCosts.forEach(calculation => {\n        const newCard: HTMLParagraphElement = document.createElement('p')\n        newCard.className = 'calculation-card'\n        const msgElement: HTMLSpanElement = document.createElement('span')\n        msgElement.innerHTML = calculation\n        newCard.appendChild(msgElement)\n        newCard.appendChild(createActionButtons('CALCULATION'))\n        calculationDeck.appendChild(newCard)\n    })\n}\n\nfunction payerSelection(action: 'INIT' | 'SELECT' | 'CLEAR', dataMembers?: Array<Participant>, e?: MouseEvent): void {\n    switch (action) {\n        case \"INIT\":\n            const payerDeck: HTMLElement = document.querySelector('#payerSelect')!\n            const payerCards: Array<HTMLParagraphElement> = generateParticipants('DYNAMIC', dataMembers!)\n            payerCards.forEach(payer => {\n                payerDeck.appendChild(payer)\n            })\n            break\n        case \"SELECT\":\n            const clickedElement: HTMLElement = e!.target as HTMLElement\n            if (clickedElement.classList.contains('member-card')) {\n                // Deselect all children\n                const childElements = document.querySelectorAll(\"#payerOption\");\n                childElements.forEach((child) => {\n                    child.classList.remove(\"member-card-selected\");\n                });\n                // Select the clicked child\n                clickedElement.classList.add(\"member-card-selected\");\n                selectedPayer = clickedElement.getAttribute('data-payer')!\n            }\n            break\n        case \"CLEAR\":\n            const childElements = document.querySelectorAll(\"#payerOption\");\n            childElements.forEach((child) => {\n                child.classList.remove(\"member-card-selected\");\n            });\n            descField.value = ''\n            amountField.value = ''\n            break\n    }\n}\n\n// Function responsible for creating a new payment\nasync function createPayment(e: Event): Promise<void> {\n    e.preventDefault()\n    const description: string = descField.value\n    // Correct user if it uses a comma instead of a period\n    const amount: string = amountField.value.replace(',', '.')\n    // Prevent HTML injection\n    if (validateText([description]) && validateNumber([amount]) && selectedPayer != undefined) {\n        const newPayment: Payment = {\n            name: selectedPayer,\n            description: description,\n            datePaid: currDateString(),\n            amount: parseFloat(amount),\n            eventId: eventId\n        }\n        // Empty modal\n        payerSelection('CLEAR')\n        await dbCreatePayment(newPayment)\n        await updateFinancials()\n    } else {\n        showError()\n    }\n}\n\nfunction generateParticipants(mode: 'STATIC' | 'DYNAMIC', participants: Array<Participant>) {\n    const cards: Array<HTMLParagraphElement> = []\n    participants.forEach(participant => {\n        // STATIC mode is used for rendering the participants in the event details\n        const newCard: HTMLParagraphElement = document.createElement('p')\n        newCard.className = 'member-card'\n        newCard.innerHTML =\n            `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 -960 960 960\" width=\"24\">  \n                <path d=\"M234-276q51-39 114-61.5T480-360q69 0 132 22.5T726-276q35-41 54.5-93T800-480q0-133-93.5-226.5T480-800q-133 0-226.5 93.5T160-480q0 59 19.5 111t54.5 93Zm246-164q-59 0-99.5-40.5T340-580q0-59 40.5-99.5T480-720q59 0 99.5 40.5T620-580q0 59-40.5 99.5T480-440Zm0 360q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q53 0 100-15.5t86-44.5q-39-29-86-44.5T480-280q-53 0-100 15.5T294-220q39 29 86 44.5T480-160Zm0-360q26 0 43-17t17-43q0-26-17-43t-43-17q-26 0-43 17t-17 43q0 26 17 43t43 17Zm0-60Zm0 360Z\"/>            \n             </svg>            \n             <span>${participant.name}</span>`\n        // DYNAMIC mode is used for rendering the participants in the payment creation modal\n        if (mode === 'DYNAMIC') {\n            newCard.id = 'payerOption'\n            newCard.setAttribute('data-payer', participant.name)\n        }\n        cards.push(newCard)\n    })\n    return cards\n}\n\n// Function responsible for updating all event details\nasync function updateEvent(): Promise<void> {\n    const dataEvent: DokkieEvent = await dbGetEventDetails(eventId)\n    const dataMembers: Array<Participant> = await dbGetParticipants(eventId)\n\n    // Render participants\n    const memberDeck: HTMLElement = document.querySelector('#memberDeck')!\n    memberDeck.innerHTML = ''\n    const memberCards: Array<HTMLParagraphElement> = generateParticipants('STATIC', dataMembers)\n    memberCards.forEach(member => {\n        memberDeck.appendChild(member)\n    })\n\n    // Render event details\n    const pageHeader: HTMLElement = document.querySelector('#pageHeader')!\n    pageHeader.textContent = capFirstChar(dataEvent.description)\n    const eventName: HTMLElement = document.querySelector('#eventName')!\n    eventName.innerHTML = capFirstChar(dataEvent.description)\n    const eventDate: HTMLElement = document.querySelector('#eventDate')!\n    eventDate.innerHTML = dateToString(dataEvent.dateCreated!)\n    const eventParticipants: HTMLElement = document.querySelector('#eventParticipants')!\n    eventParticipants.innerHTML = dataEvent.participantCount!.toString()\n\n    // Render payment modal\n    payerSelection('INIT', dataMembers)\n\n}\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n    await updateEvent()\n    await updateFinancials()\n})\n"],"names":["dbGetPayments","eventId","query","api","reason","dbCreatePayment","payment","dbDeletePayment","dbEditPayment","newAmount","updateFinancials","payCalculation","shareCalculation","editPayment","userEdit","capFirstChar","validateNumber","deletePayment","createActionButtons","mode","createPaymentBtn","text","clickHandler","button","editBtn","deleteBtn","paymentRow","createCalcBtn","payBtn","shareBtn","calculationRow","calculateCosts","allPayments","allParticipants","dbGetParticipants","calcMsg","createMsg","payer","amount","participant","description","moneyOwed","msg","authorizeUser","url","descField","amountField","logoutBtn","confirmPayment","payerSelect","selectedPayer","destroySession","payerSelection","createPayment","renderCalculations","renderPayments","dataPayment","paymentTable","totalElement","totalPayments","newRow","rowsLeft","index","calculatedCosts","calculationDeck","calculation","newCard","msgElement","action","dataMembers","e","payerDeck","generateParticipants","clickedElement","child","validateText","newPayment","currDateString","showError","participants","cards","updateEvent","dataEvent","dbGetEventDetails","memberDeck","member","pageHeader","eventName","eventDate","dateToString","eventParticipants"],"mappings":"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"}