{"version":3,"file":"app_6-41ebeee7.js","sources":["../../src/scripts/create.ts"],"sourcesContent":["import {DokkieEvent, Participant} from \"../types\"\nimport \"../../wwwroot/assets/legacy/hboictcloud-config\"\nimport {dbEventCreate} from \"../db/EventDB\"\nimport {authorizeUser, destroySession} from \"../services/AuthService\"\nimport {dbUserSearch} from \"../db/UserDB\"\nimport {showError, validateText} from \"./util\"\nimport {dbAddParticipant} from \"../db/ParticipantDB\"\nimport {session, url} from \"@hboictcloud/api\"\n\n// Check if user has an active session\nauthorizeUser()\n\n// DOM elements\nconst createBtn: HTMLElement = document.querySelector('#createEvent')!\nconst searchBtn: HTMLElement = document.querySelector('#searchUser')!\nconst eventDesc: HTMLInputElement = document.querySelector('#eventName')!\nconst searchInput: HTMLInputElement = document.querySelector('#searchInput')!\nconst participantsDeck: HTMLElement = document.querySelector('#participantsDeck')!\nconst logoutBtn: HTMLElement = document.querySelector('#logoutDebug')!\nconst addedParticipants: Array<Participant> = []\n\n// Event listeners\ncreateBtn.addEventListener('click', createEvent)\nsearchBtn.addEventListener('click', searchUser)\nlogoutBtn.addEventListener('click', destroySession)\n\n// Add current user that's creating the event\nconst currSession = session.get('user')\nconst currUser: Participant = {\n    name: currSession.username,\n    userId: currSession.userId\n}\naddedParticipants.push(currUser)\n\n\n// Function that creates the event and adds the selected participants into the event\nasync function createEvent(e: Event) {\n    e.preventDefault()\n    const eventDescription = eventDesc.value\n    if (validateText([eventDescription])) {\n        const newEvent: DokkieEvent = {\n            description: eventDescription,\n        }\n        try {\n            const data = await dbEventCreate(newEvent)\n            const eventId: number = data.insertId\n            await dbAddParticipant(eventId, addedParticipants)\n            url.redirect(`./event.html?id=${eventId}`)\n        } catch (error) {\n            showError()\n        }\n    } else {\n        showError()\n    }\n}\n\n// Function used to search a user to add to the event\nasync function searchUser(e: Event) {\n    e.preventDefault()\n    const search = searchInput.value\n    const result = await dbUserSearch(search)\n\n    // If a user is found\n    if (result.length === 1) {\n        const newParticipant: Participant = {\n            name: result[0].username,\n            userId: result[0].userId,\n        }\n        // Check if the user is already added\n        if (!isDuplicate(newParticipant)) {\n            addedParticipants.push(newParticipant)\n            updateParticipants() // Update UI accordingly\n            searchInput.value = '' // empty search field\n        } else {\n            showError('Gebruiker is al toegevoegd')\n        }\n    } else {\n        showError('Geen gebruikers gevonden')\n    }\n}\n\n// Function used to check if a participant is already added to the event\nfunction isDuplicate(newParticipant: Participant): boolean {\n    return addedParticipants.some(\n        // Take an item: participant out of the array => check if participant.userId equals newParticipant.userId\n        existingParticipant => existingParticipant.userId === newParticipant.userId\n    )\n}\n\n// Function used to update the UI upon adding a new participant\nfunction updateParticipants(): void {\n    participantsDeck.innerHTML = '';\n    let startIndex = 1; // Don't display the user creating it which is at pos 0\n    for (let pos = startIndex; pos < addedParticipants.length; pos++) {\n        const participantCard = document.createElement('div');\n        participantCard.className = 'participant-card';\n        participantCard.innerHTML = `<span>${addedParticipants[pos].name}</span>`\n        participantsDeck.appendChild(participantCard)\n    }\n}"],"names":["authorizeUser","createBtn","searchBtn","eventDesc","searchInput","participantsDeck","logoutBtn","addedParticipants","createEvent","searchUser","destroySession","currSession","session","currUser","e","eventDescription","validateText","newEvent","eventId","dbEventCreate","dbAddParticipant","url","showError","search","result","dbUserSearch","newParticipant","isDuplicate","updateParticipants","existingParticipant","startIndex","pos","participantCard"],"mappings":"yOAUAA,IAGA,MAAMC,EAAyB,SAAS,cAAc,cAAc,EAC9DC,EAAyB,SAAS,cAAc,aAAa,EAC7DC,EAA8B,SAAS,cAAc,YAAY,EACjEC,EAAgC,SAAS,cAAc,cAAc,EACrEC,EAAgC,SAAS,cAAc,mBAAmB,EAC1EC,EAAyB,SAAS,cAAc,cAAc,EAC9DC,EAAwC,CAAA,EAG9CN,EAAU,iBAAiB,QAASO,CAAW,EAC/CN,EAAU,iBAAiB,QAASO,CAAU,EAC9CH,EAAU,iBAAiB,QAASI,CAAc,EAGlD,MAAMC,EAAcC,EAAQ,IAAI,MAAM,EAChCC,EAAwB,CAC1B,KAAMF,EAAY,SAClB,OAAQA,EAAY,MACxB,EACAJ,EAAkB,KAAKM,CAAQ,EAI/B,eAAeL,EAAYM,EAAU,CACjCA,EAAE,eAAe,EACjB,MAAMC,EAAmBZ,EAAU,MACnC,GAAIa,EAAa,CAACD,CAAgB,CAAC,EAAG,CAClC,MAAME,EAAwB,CAC1B,YAAaF,CAAA,EAEb,GAAA,CAEA,MAAMG,GADO,MAAMC,EAAcF,CAAQ,GACZ,SACvB,MAAAG,EAAiBF,EAASX,CAAiB,EAC7Cc,EAAA,SAAS,mBAAmBH,CAAO,EAAE,OAC7B,CACFI,GACd,CAAA,MAEUA,GAElB,CAGA,eAAeb,EAAWK,EAAU,CAChCA,EAAE,eAAe,EACjB,MAAMS,EAASnB,EAAY,MACrBoB,EAAS,MAAMC,EAAaF,CAAM,EAGpC,GAAAC,EAAO,SAAW,EAAG,CACrB,MAAME,EAA8B,CAChC,KAAMF,EAAO,CAAC,EAAE,SAChB,OAAQA,EAAO,CAAC,EAAE,MAAA,EAGjBG,EAAYD,CAAc,EAK3BJ,EAAU,4BAA4B,GAJtCf,EAAkB,KAAKmB,CAAc,EAClBE,IACnBxB,EAAY,MAAQ,GAGxB,MAEAkB,EAAU,0BAA0B,CAE5C,CAGA,SAASK,EAAYD,EAAsC,CACvD,OAAOnB,EAAkB,KAErBsB,GAAuBA,EAAoB,SAAWH,EAAe,MAAA,CAE7E,CAGA,SAASE,GAA2B,CAChCvB,EAAiB,UAAY,GAC7B,IAAIyB,EAAa,EACjB,QAASC,EAAMD,EAAYC,EAAMxB,EAAkB,OAAQwB,IAAO,CACxD,MAAAC,EAAkB,SAAS,cAAc,KAAK,EACpDA,EAAgB,UAAY,mBAC5BA,EAAgB,UAAY,SAASzB,EAAkBwB,CAAG,EAAE,IAAI,UAChE1B,EAAiB,YAAY2B,CAAe,CAChD,CACJ"}