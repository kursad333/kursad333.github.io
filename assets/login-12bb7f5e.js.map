{"version":3,"file":"login-12bb7f5e.js","sources":["../../src/scripts/login.ts"],"sourcesContent":["import \"../../wwwroot/assets/legacy/hboictcloud-config\";\nimport {userCreate} from \"../db/UserDB\";\nimport {User} from \"../types\";\nimport {showError, validateText} from \"./util\";\nimport {createSession} from \"../services/AuthService\";\n\n\n// Initiate DOM elements\nconst loginButton: HTMLElement = document.querySelector(\"#login-confirm\")!\nconst registerButton: HTMLElement = document.querySelector(\"#register-confirm\")!\nconst loginNameField: HTMLInputElement = document.querySelector('input#loginName')!\nconst loginPassField: HTMLInputElement = document.querySelector('input#loginPass')!\nconst regEmailField: HTMLInputElement = document.querySelector('input#registerEmail')!\nconst regPassField: HTMLInputElement = document.querySelector('input#registerPass')!\nconst regNameField: HTMLInputElement = document.querySelector('input#registerName')!\n\n// Set listener buttons\nloginButton?.addEventListener(\"click\", loginUser)\nregisterButton?.addEventListener(\"click\", registerUser)\n\n// Function used to login the user.\nasync function loginUser(e: Event): Promise<void> {\n    e.preventDefault()\n\n    const loginNameInput = loginNameField.value\n    const loginPassInput = loginPassField.value\n\n    if (validateText([loginNameInput, loginPassInput])) {\n        const user: User = {\n            password: loginPassInput,\n            username: loginNameInput\n        }\n        // await database transaction\n        if (await createSession(user)) {\n            window.location.href = \"../app/\"\n        } else {\n            showError()\n        }\n    } else {\n        showError()\n    }\n}\n\n// Function used to register the user.\nasync function registerUser(e: Event): Promise<void> {\n    e.preventDefault()\n\n    const regEmailInput: string = regEmailField?.value\n    const regPassInput: string = regPassField?.value\n    const regNameInput: string = regNameField?.value\n\n    if (validateText([regEmailInput, regPassInput, regNameInput])) {\n        const newUser: User = {\n            email: regEmailInput,\n            password: regPassInput,\n            username: regNameInput\n        }\n        // await database transaction\n        if (await userCreate(newUser) && await createSession(newUser)) {\n            window.location.href = \"../app/\"\n        } else {\n            showError('Gebruikersnaam is al in gebruik, probeer iets nieuws')\n        }\n    } else {\n        showError()\n    }\n}"],"names":["loginButton","registerButton","loginNameField","loginPassField","regEmailField","regPassField","regNameField","loginUser","registerUser","e","loginNameInput","loginPassInput","validateText","createSession","showError","regEmailInput","regPassInput","regNameInput","newUser","userCreate"],"mappings":"mEAQA,MAAMA,EAA2B,SAAS,cAAc,gBAAgB,EAClEC,EAA8B,SAAS,cAAc,mBAAmB,EACxEC,EAAmC,SAAS,cAAc,iBAAiB,EAC3EC,EAAmC,SAAS,cAAc,iBAAiB,EAC3EC,EAAkC,SAAS,cAAc,qBAAqB,EAC9EC,EAAiC,SAAS,cAAc,oBAAoB,EAC5EC,EAAiC,SAAS,cAAc,oBAAoB,EAGlFN,GAAA,MAAAA,EAAa,iBAAiB,QAASO,GACvCN,GAAA,MAAAA,EAAgB,iBAAiB,QAASO,GAG1C,eAAeD,EAAUE,EAAyB,CAC9CA,EAAE,eAAe,EAEjB,MAAMC,EAAiBR,EAAe,MAChCS,EAAiBR,EAAe,MAElCS,EAAa,CAACF,EAAgBC,CAAc,CAAC,EAMzC,MAAME,EALS,CACf,SAAUF,EACV,SAAUD,CAAA,CAGc,EACxB,OAAO,SAAS,KAAO,UAEbI,IAGJA,GAElB,CAGA,eAAeN,EAAaC,EAAyB,CACjDA,EAAE,eAAe,EAEjB,MAAMM,EAAwBX,GAAA,YAAAA,EAAe,MACvCY,EAAuBX,GAAA,YAAAA,EAAc,MACrCY,EAAuBX,GAAA,YAAAA,EAAc,MAE3C,GAAIM,EAAa,CAACG,EAAeC,EAAcC,CAAY,CAAC,EAAG,CAC3D,MAAMC,EAAgB,CAClB,MAAOH,EACP,SAAUC,EACV,SAAUC,CAAA,EAGV,MAAME,EAAWD,CAAO,GAAK,MAAML,EAAcK,CAAO,EACxD,OAAO,SAAS,KAAO,UAEvBJ,EAAU,sDAAsD,CACpE,MAEUA,GAElB"}